CSSS508 Introduction
========================================================
author: Charles Lanfear
date: September 27, 2017
width: 1600
height: 900
transition: linear

```{r, include=FALSE}
library(tidyverse)
data(cars)
data(swiss)
```

Course Goals
========================================================
incremental: true

* Develop intermediate data management and analysis skills in R
* Learn basic programming
* Introduce reproducible research practices
* Prepare you for statistics and CSSS courses

Who is this guy?
========================================================
incremental: true

Chuck Lanfear

* Instructor (*not professor*)
* 4th Year Sociology PhD student
* Research:
  + Quantitative Sociology
  + Computational Demography
  + Experimental Criminology
* Translation:
  + I write code every day
  + I am a turbo-nerd 
  + I think programming is incredibly important

Logistics
========================================================

Location: 
* Lecture: SAV117 on Wednesdays, 3:30-5:20
* Optional Lab: SAV117 on Mondays, 3:30-5:20
* Office Hours: SAV240 by Appointment

Materials: http://clanfear.github.io/CSSS508

Grading:
* Final grade: C/NC, 60% to get Credit
* **Homework** most weeks (75% of grade), combination of reading and programming
* **Peer Grading** of homeworks (25% of grade)
* Both handed in via Canvas.


Peer grading, really?
========================================================

Yes, peer grading...

* **35+ students, no TA**
* You will write your reports better knowing others will see them
* Learn new tricks from reading others' code; "appreciate the little things"

Format:
* Randomly assigned peers, turnaround time: 1 week (due before next class)
* You'll get a rubric and are expected to leave constructive comments
* High scoring assignments may be adapted into keys (with your permission)
* Email me if you want more feedback


Getting Help on the Mailing List
========================================================
incremental: true

Don't ask like this:

> tried lm(y~x) but it iddn't work wat do

Instead, ask like this: 

> ```
y <- seq(1:10) + rnorm(10)
x <- seq(0:10)
model <- lm(y ~ x)
```
> Running the block above gives me the following error, anyone know why?
```
Error in model.frame.default(formula = y ~ x, drop.unused.levels = TRUE) : 
  variable lengths differ (found for 'x')
```

Searching in R Slides
========================================================
incremental: true

I do not provide PowerPoint or PDF slides. If you want to search a lecture for a particular item, use the slide browser:

1. Open the `.html` file for the slides.
2. Hit `Esc`
   * This opens up a viewer for the entire lecture
   * You can browse left and right with the arrow keys
3. To search for text, hit `Ctrl+F` or `âŒ˜+F` and enter the search term
4. Browse through the slides to see where that text is highlighted.

If you must take notes directly on course slides, use an add-on like Beanote for Chrome or Skitch for Safari. You can also search the provided source code on the website.

Rough Schedule
========================================================
incremental: true

1. Intro to R, RStudio, and R Markdown
2. Plotting with `ggplot2`
3. Summarizing and Combining Data: `dplyr`
4. R Data Structures
5. Data Cleaning: Import/Export, `tidyr`, Dates
6. Loops and Functions
7. Vectorization and Functions
8. Strings / Text Processing
9. Geospatial Data and Maps
10. Social Media Data and Text Mining


R and RStudio
========================================================
type: section


Why R?
========================================================
incremental: true

R is a programming language built for statistical computing.

If one already knows Stata or similar software, why use R?

* R is *free*, so you don't need a terminal server.
* R has a *very* large community.
* R can handle virtually any data format.
* R is object oriented and makes replication easy.
* R is a *language* so it can do *everything*.
* R is a good stepping stone to other languages like Python.


R Studio
========================================================
incremental: true

R Studio is a "front-end" or integrated development encironment (IDE) for R that can make your life *easier*.

RStudio can:

* Organize your code, output, and plots.
* Auto-complete code and highlight syntax.
* Help view data and objects.
* Enable easy integration of R code into documents.


Selling you on R Markdown
========================================================
incremental: true

Killer feature of R/RStudio is ease of making R Markdown files:

* Document analysis as you go with integrated text, code, and output
  + No rerunning, recopying, or repasting
  + Easy for collaborators to understand
  + Show as little or as much of the code as you want
* Make: presentations (like this one!); webpages; reports in html; Word docs
* Works with LaTeX for more formatting control

We'll get back to this soon!


Getting Started
========================================================

Open up RStudio now and choose *File > New File > R Script*.

Then, let's get oriented with the interface:

- Top Left: Code **editor** pane, data viewer (browse with tabs)
- Bottom Left: **Console** for running code (> prompt)
- Top Right: List of objects in **environment**, code **history** tab.
- Bottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files.

You can change the layout in *Preferences > Pane Layout*

Editing and Running Code
========================================================
incremental: true

There are several ways to run R code in RStudio:

1. Highlight lines in the **editor** window and click **Run** or hit *Cntl-Enter* or *Command-Enter* to run them all.
2. Type individual lines in the **console** and press *Enter*.
3. In R Markdown documents, click within a code block ("chunk") and
click on a choice in the **Chunks** dropdown.

The console will show the lines you ran followed by any printed output. If you mess up (e.g. leave off
a parenthesis), R might show a + sign prompting you to finish the command:

```{r Coding 1, eval=FALSE}
> (11-2
+
```
Finish the command or hit *Esc* to get out of this.

R as a Calculator
========================================================
incremental: true

In the **console**, type 123 + 456 + 789 and hit *Enter*.
```{r Calc 1}
123 + 456 + 789
```
The [1] in the output indicates what line of output is shown.

Now in your blank R document in the **editor**, try typing the line sqrt(400) and either
clicking **Run** or hitting *Cntl-Enter*.
```{r Calc 2}
sqrt(400)
```

Functions and Help
========================================================
incremental: true

`sqrt()` is an example of a **function** in R.

If we didn't have a good guess as to what `sqrt()` will do, we can type `?sqrt` in the console
and look at the **Help** panel on the right.

```{r Help, eval=FALSE}
?sqrt
```

**Arguments** are the *inputs* to a function. In this case, the only argument to `sqrt()`
is a number or a vector of numbers `x`.

Help files provide documentation on how to use functions and what functions produce.

Creating Objects
========================================================
incremental: true

R stores everything as an **object**, including data, functions, models, and output.

Creating an object can be done using the assignment operator `<-`
```{r Objects 1}
new.object <- 144
```
You can display or "call" an object by using its name.
```{r Objects 2}
new.object
```
Object names can have `_` and `.` in them, but cannot *start* with numbers.

Using Objects
========================================================
incremental: true

The **name** represents the information stored in that **object**, so you can treat the object's name
as if it were the values stored inside.
```{r Objects 3}
new.object + 10
new.object + new.object
sqrt(new.object)
```

Creating Vectors
========================================================
incremental: true

A **vector** is a series of **elements**, such as numbers.

You can create a vector and store it as an object in the same way. To do this, use the
function `c()` which stands for "combine".
```{r Vectors 1}
new.object <- c(4, 9, 16, 25, 36)
new.object
```

If you name an object the same name as an existing object, it will overwrite it.

You can provide a vector as an argument for many functions.

```{r Vectors 2}
sqrt(new.object)
```

More Complex Objects
========================================================

The same principles can be used to create more complex objects like **matrices**, **arrays**, **lists**, and **data frames** (lists which look like matrices but can hold numerical and text information).

Most data sets you will work with will be read into R and stored as a **data frame**, so this course will mainly focus on manipulating and visualizing these objects.

Before we get into these, let's revisit R Markdown.


R Markdown
========================================================
type: section


Making R Markdown Documents
========================================================

Let's try making an R Markdown file:

1. Choose *File > New File > R Markdown...*
2. Make sure *HTML output* is selected and click OK
3. Save the file somewhere, call it `my_first_Rmd.Rmd`
4. Click the *Knit HTML* button
5. Watch the progress in the R Markdown pane, then gaze upon your result!

You may also open up the file in your computer's browser if you so desire.


Making R Markdown Documents
========================================================
incremental: true

The header of an .Rmd file is a [YAML](http://yaml.org/) (YAML Ain't Markup Language) code block, and everything else is part of the main document.

```{}
---
title: "Untitled"
author: "Charles Lanfear"
date: "March 29, 2017"
output: html_document
---
```

To mess with global formatting, [you can modify the header](http://rmarkdown.rstudio.com/html_document_format.html).

```{}
output:
  html_document:
    theme: readable
```


Making R Markdown Documents
========================================================

**bold/strong emphasis**

*italic/normal emphasis*

# Header

## Subheader

### Subsubheader

> Block quote from
> famous person

***

`**bold/strong emphasis**`

`*italic/normal emphasis*`

`# Header`

`## Subheader`

`### Subsubheader`

```
> Block quote from
> famous person
```

More R Markdown Syntax
========================================================

left: 30%

1. Ordered lists
1. Are real easy
  1. Even with sublists
  
* Unordered lists
* Are also real easy
  + Also even with sublists

[URLs are trivial](http://www.uw.edu)

![pictures aren't bad either](http://depts.washington.edu/uwcreate/img/UW_W-Logo_smallRGB.gif)


***

```
1. Ordered lists
1. Are real easy
  1. Even with sublists
```

```
* Unordered lists
* Are also real easy
  + Also even with sublists
```

`[URLs are trivial](http://www.uw.edu)`

`![pictures aren't bad either](http://depts.washington.edu/uwcreate/img/UW_W-Logo_smallRGB.gif)`


Formulae and Syntax in Markdown
========================================================

You can put some math $y= \left( \frac{2}{3} \right)^2$ right up in there.

$$\frac{1}{n} \sum_{i=1}^{n} x_i = \bar{x}_n$$

Or a sentence with `code-looking font`.


```
y <- 1:5
z <- y^2
```

***

`You can put some math $y= \left( \frac{2}{3} \right)^2$ right up in there`

`$$\frac{1}{n} \sum_{i=1}^{n} x_i = \bar{x}_n$$`

`` Or a sentence with `code-looking font`. ``


    ```
    y <- 1:5
    z <- y^2
    ```


Your Turn
========================================================

Feel free to edit and re-knit `my_first_Rmd.Rmd` to give it some pizzazz: Add sections, have it number the sections, make a list, throw in the UW logo, change the theme, insert a gratuitous equationÃ¢Â€Â¦

* [Ways to modify the overall document appearance](http://rmarkdown.rstudio.com/html_document_format.html)
* [Ways to format parts of your document](http://rmarkdown.rstudio.com/authoring_basics.html)


R Markdown formatting caveat
========================================================

To keep R Markdown dead-simple, it lacks some features you might occasionally want to use. Your options for fancier documents are:

* Use HTML with CSS for custom formatting
* Use LaTeX and .Rnw files instead of .Rmd

For day-to-day use, plain vanilla R Markdown does the job.


R code and R Markdown
========================================================

Inside Markdown documents, lines of R code make up what are called **chunks**. Code is sandwiched between sets of three backticks and `{r}`.

    ```{r}`r ''`
    data(cars)
    summary(cars)
    ```


```{r}
data(cars)
summary(cars)
```


Chunk Options
========================================================

Chunks have options that control what happens with its code, such as:

* `echo=FALSE`: keeps R code from being shown in the document
* `results='hide'`: hides R's (non-plot) output from the document
* `warning=FALSE, message=FALSE`: suppresses R warnings or messages from the document, e.g. about versions
* `eval=FALSE`: show R code in the document without running it
* `cache=TRUE`: saves results of running that chunk so if it takes a while, you won't have to re-run it each time you re-knit the document
* `fig.height=5, fig.width=5`: modify the dimensions of any plots that are generated in the chunk (units are in inches)


Playing with Chunk Options
========================================================

Try adding or changing the chunk options (separated by commas) for the two chunks in `my_first_Rmd.Rmd` and re-knitting to check what happens.


You can also name your chunks by putting something after the `r` before the chunk options.

    ```{r summarize_cars, echo=FALSE}`r ''`
    summary(cars)
    ```
After you name your chunks, look what happens in the dropdown on the bottom left of your editor pane.


In-line R code
========================================================
incremental: true

Sometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with `r`.

```{r, echo=FALSE}
library(knitr)
```

`Four score and seven years ago is the same as` `` `r inline_expr("4*20 + 7", "md")` `` `years.`

Four score and seven years ago is the same as `r 4*20 + 7` years.

Maybe we've saved a variable in a chunk we want to reference in the text:
```{r}
x <- sqrt(77) # <- is how we assign variables
```

`The value of ` `` `x` `` `rounded to the nearest two decimals is` `` `r inline_expr("round(x, 2)", "md")` ``.

The value of `x` rounded to the nearest two decimals is `r round(x, 2)`.

This is Amazing!
========================================================
incremental: true

Having R dump values directly into your document protects you from silly mistakes:

* Never wonder "how did I come up with this quantity?" ever again---just look at your formula in your .Rmd file
* Consistency, no "find/replace" mishaps: reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes)
* You are more likely to make a typo in a "hard-coded" number than you are to write R code that somehow runs but gives you the wrong thing


Example: Keeping document date current
=======================================================

In your YAML header, make the date come from R's `Sys.time()` function by changing:

`date: "March 30, 2016"`

to:

`date: "` `` `r inline_expr("Sys.time()", "md")` `` `"`

Fancier option: use `format(Sys.Date(), format="%B %d, %Y")` instead to take today's date and make it read nicely.


Data Frames
========================================================
type: section


What's Up with Cars?
========================================================
incremental: true

In the sample R Markdown document you are working on, we can load the built-in data
`cars`, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.

`data(cars)` loads this dataframe into the Global Environment (as a *promise*).

`View(cars)` pops up a viewer pane ("interactive" use only, don't put in R Markdown document!) or

```{r}
head(cars) # prints first 6 rows, see tail() too
```


Tell Me More About Cars
========================================================

```{r}
str(cars) # str[ucture]
summary(cars)
```


Drawing Ugly Pictures of Cars
========================================================

```{r}
hist(cars$speed) # Histogram
```

***

```{r}
hist(cars$dist)
```


Drawing Slightly Less Ugly Pictures
========================================================


```{r, eval=FALSE}
hist(cars$dist,
     xlab = "Distance (ft)", # X axis label
     main = "Observed stopping distances of cars") # Title
```

***

```{r, echo=FALSE}
hist(cars$dist,
     xlab = "Distance (ft)",
     main = "Observed stopping distances of cars")
```


Math with Cars
========================================================
incremental: true

If you put an assignment `<-` in parentheses `()`, R will print the output of the assignment out for you in your document. Otherwise, it won't show the value.

```{r}
( dist_mean <- mean(cars$dist) )
( speed_mean <- mean(cars$speed) )
```


Drawing Still Ugly Pictures
========================================================

```{r, eval=FALSE}
plot(dist ~ speed, data = cars,
     xlab = "Speed (mph)",
     ylab = "Stopping distance (ft)",
     main = "Speeds and stopping distances of cars",
     pch = 16) # Point size
abline(h = dist_mean, col = "firebrick")
abline(v = speed_mean, col = "cornflowerblue")
```

***

```{r, echo=FALSE}
plot(dist ~ speed, data = cars,
     xlab = "Speed (mph)",
     ylab = "Stopping distance (ft)",
     main = "Speeds and stopping distances of cars",
     pch = 16)
abline(h = dist_mean, col = "firebrick")
abline(v = speed_mean, col = "cornflowerblue")
```


Swiss Time
========================================================
incremental: true

Let's switch gears to the `swiss` data frame built in to R.

First, use `?swiss` to see what things mean.

Then, load it using `data(swiss)`

Add chunks to your R Markdown document inspecting swiss, defining variables, doing some exploratory plots using hist or plot. You can experiment with [colors](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) and [shapes](http://www.cookbook-r.com/Graphs/Shapes_and_line_types/).


Looking at Swiss
========================================================

```{r}
pairs(swiss, pch = 8, col = "violet", main = "Pairwise comparisons of Swiss variables")
```


Installing Packages
========================================================
incremental: true

Let's make a table that looks a little less code-y in the output. To do this, we'll want to install a **package** called `pander`.

In the console: `install.packages("pander")`.

* Note that unlike the `library()` command, the name of a package to be installed must be in quotes. This is because the name here is a search term (text, not an object!) while for `library()` it is an actual R object.
* Once you install a package, you don't need to re-install it until you update R. Consequently, you should not include `install.packages()` in any markdown document or R script!


Installing Tutorial Package
========================================================
incremental: true

This term I am introducing a tutorial package to complement lectures and homeworks. It features interactive webpages built using the `learnr` and `checkr` packages, on which you can run R code and receive basic feedback.

If you want to make use of these tutorials, run the following code in your R console to install the package:

```{r, eval=FALSE}
install.packages(c("learnr", "dplyr"))
install.packages("https://github.com/clanfear/CSSS508/raw/master/uwcsss508_0.1.0.zip", repos = NULL)
```

You can run tutorial 1 using the following code. Change only the number in the first argument to access later tutorials.

```{r, eval=FALSE}
library(learnr)
library(uwcsss508)
run_tutorial("tutorial_1", "uwcsss508")
```

Note that the tutorial package has been in development for less than a month, so it will be updated frequently and may have bugs. Let me know if you have issues! For more in-depth tutorials,  see the [DataCamp](http://www.datacamp.com) links on the [course website](http://clanfear.github.io/CSSS508).


Making Tables
========================================================

```{r}
library(pander) # loads pander, do once in your session
pander(summary(swiss), style = "rmarkdown", split.tables = 120)
```


Data Look a Little Nicer This Way
========================================================

```{r}
pander(head(swiss, 5), style = "rmarkdown", split.tables = 120)
```


Homework
========================================================

Write up a .Rmd file showing some exploratory analyses of the Swiss fertility data. Upload both the `.Rmd` file and the `.html` file to Canvas. You must upload *both* for credit.

Mix in-line R calculations, tables, R output, and plots with text describing the relationships you see. Include *at least* one plot and one table. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g. with functions like `nrow()`, `mean()`, `sd()`, `cor()`, `median()`, `min()`, `quantile()`) and *may not hard-code any numbers referenced in your text*.

Your document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options `echo` and `results` to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text---*not as printed code and output*---and rounded so as not to be absurdly precise (1 to 3 digits).

### DUE: 11:59 PM, Tuesday, October 3rd, 2017


Grading Rubric
========================================================
incremental: true

0: Didn't turn anything in.

1: Turned in but low effort, ignoring many directions.

2: Decent effort, followed directions with some minor issues.

3: Nailed it!